{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = TouchableItem;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar ANDROID_VERSION_LOLLIPOP = 21;\n\nfunction TouchableItem(_ref) {\n  var _ref$borderless = _ref.borderless,\n      borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n      _ref$pressColor = _ref.pressColor,\n      pressColor = _ref$pressColor === void 0 ? 'rgba(0, 0, 0, .32)' : _ref$pressColor,\n      style = _ref.style,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"borderless\", \"pressColor\", \"style\", \"children\"]);\n\n  if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n    return React.createElement(_reactNative.TouchableNativeFeedback, _extends({}, rest, {\n      useForeground: _reactNative.TouchableNativeFeedback.canUseNativeForeground(),\n      background: _reactNative.TouchableNativeFeedback.Ripple(pressColor, borderless)\n    }), React.createElement(_reactNative.View, {\n      style: style\n    }, React.Children.only(children)));\n  } else {\n    return React.createElement(_reactNative.TouchableOpacity, _extends({\n      style: style\n    }, rest), children);\n  }\n}","map":{"version":3,"sources":["TouchableItem.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","borderless","pressColor","rest","Platform","TouchableNativeFeedback","style","React"],"mappings":";;;;;;;;;AAOA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,IAAMA,wBAAwB,GAA9B,EAAA;;AAEe,SAAA,aAAA,OAML;AAAA,6BALRC,UAKQ;AAAA,MALRA,UAKQ,gCAN4B,KAM5B;AAAA,6BAJRC,UAIQ;AAAA,MAJRA,UAIQ,gCAN4B,oBAM5B;AAAA,MAN4B,KAM5B,QAN4B,KAM5B;AAAA,MAN4B,QAM5B,QAN4B,QAM5B;AAAA,MADLC,IACK;;AASR,MACEC,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAAA,SAAAA,IACAA,YAAAA,CAAAA,QAAAA,CAAAA,OAAAA,IAFF,wBAAA,EAGE;AACA,WACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,uBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,MAAA,aAAa,EAAEC,YAAAA,CAAAA,uBAAAA,CAFjB,sBAEiBA,EAFjB;AAGE,MAAA,UAAU,EAAEA,YAAAA,CAAAA,uBAAAA,CAAAA,MAAAA,CAAAA,UAAAA,EAAAA,UAAAA;AAHd,KAAA,CAAA,EAKE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAM,MAAA,KAAK,EAAEC;AAAb,KAAA,EAAqBC,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CANzB,QAMyBA,CAArB,CALF,CADF;AAJF,GAAA,MAaO;AACL,WACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,gBAAA,EAAA,QAAA,CAAA;AAAkB,MAAA,KAAK,EAAED;AAAzB,KAAA,EAAA,IAAA,CAAA,EADF,QACE,CADF;AAKD;AACF","sourcesContent":["/**\n * TouchableItem provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nexport type Props = ViewProps & {\n  pressColor?: string;\n  disabled?: boolean;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n  children: React.ReactNode;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default function TouchableItem({\n  borderless = false,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  style,\n  children,\n  ...rest\n}: Props) {\n  /*\n   * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n   * therefore only enable it on Android Lollipop and above.\n   *\n   * All touchables on Android should have the ripple effect according to\n   * platform design guidelines.\n   * We need to pass the background prop to specify a borderless ripple effect.\n   */\n  if (\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_LOLLIPOP\n  ) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n        background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n      >\n        <View style={style}>{React.Children.only(children)}</View>\n      </TouchableNativeFeedback>\n    );\n  } else {\n    return (\n      <TouchableOpacity style={style} {...rest}>\n        {children}\n      </TouchableOpacity>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}