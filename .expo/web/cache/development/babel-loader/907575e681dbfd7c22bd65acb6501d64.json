{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = SafeAreaProviderCompat;\nexports.initialSafeAreaInsets = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _reactNativeIphoneXHelper = require(\"react-native-iphone-x-helper\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar initialSafeAreaInsets = _objectSpread({\n  top: (0, _reactNativeIphoneXHelper.getStatusBarHeight)(true),\n  bottom: (0, _reactNativeIphoneXHelper.getBottomSpace)(),\n  right: 0,\n  left: 0\n}, _reactNativeSafeAreaContext.initialWindowSafeAreaInsets);\n\nexports.initialSafeAreaInsets = initialSafeAreaInsets;\n\nfunction SafeAreaProviderCompat(_ref) {\n  var children = _ref.children;\n  return React.createElement(_reactNativeSafeAreaContext.SafeAreaConsumer, null, function (insets) {\n    if (insets) {\n      return children;\n    }\n\n    return React.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n      initialSafeAreaInsets: initialSafeAreaInsets\n    }, children);\n  });\n}","map":{"version":3,"sources":["SafeAreaProviderCompat.tsx"],"names":["initialSafeAreaInsets","top","bottom","right","left","initialWindowSafeAreaInsets","children","insets"],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,2BAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;;AAKA,IAAA,yBAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQO,IAAMA,qBAAqB;AAEhCC,EAAAA,GAAG,EAAE,CAAA,GAAA,yBAAA,CAAA,kBAAA,EAF8B,IAE9B,CAF2B;AAGhCC,EAAAA,MAAM,EAAE,CAAA,GAAA,yBAAA,CAH2B,cAG3B,GAHwB;AAIhCC,EAAAA,KAAK,EAJ8B,CAAH;AAKhCC,EAAAA,IAAI,EAL+B;AAAH,GAQ7BC,2BAAAA,CAAAA,2BAR6B,CAA3B;;;;AAeQ,SAAA,sBAAA,OAAqD;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;AAClE,SACE,KAAA,CAAA,aAAA,CAAC,2BAAA,CAAD,gBAAA,EAAA,IAAA,EACIC,UAAAA,MAAD,EAAY;AACX,QAAA,MAAA,EAAY;AAIV,aAAA,QAAA;AACD;;AAED,WACE,KAAA,CAAA,aAAA,CAAC,2BAAA,CAAD,gBAAA,EAAA;AAAkB,MAAA,qBAAqB,EAAEP;AAAzC,KAAA,EADF,QACE,CADF;AAVN,GACE,CADF;AAkBD","sourcesContent":["import * as React from 'react';\nimport {\n  SafeAreaProvider,\n  SafeAreaConsumer,\n  initialWindowSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\n\n// The provider component for safe area initializes asynchornously\n// Until the insets are available, there'll be blank screen\n// To avoid the blank screen, we specify some initial values\nexport const initialSafeAreaInsets = {\n  // Approximate values which are good enough for most cases\n  top: getStatusBarHeight(true),\n  bottom: getBottomSpace(),\n  right: 0,\n  left: 0,\n  // If we are on a newer version of the library, we can get the correct window insets\n  // The component might not be filling the window, but this is good enough for most cases\n  ...initialWindowSafeAreaInsets,\n};\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport default function SafeAreaProviderCompat({ children }: Props) {\n  return (\n    <SafeAreaConsumer>\n      {(insets) => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return children;\n        }\n\n        return (\n          <SafeAreaProvider initialSafeAreaInsets={initialSafeAreaInsets}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaConsumer>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}