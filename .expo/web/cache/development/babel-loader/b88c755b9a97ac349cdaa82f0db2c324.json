{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = useIsFocused;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _useNavigation = _interopRequireDefault(require(\"./useNavigation\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction useIsFocused() {\n  var navigation = (0, _useNavigation[\"default\"])();\n\n  var _ref = (0, React.useState)(navigation.isFocused),\n      _ref2 = _slicedToArray(_ref, 2),\n      isFocused = _ref2[0],\n      setIsFocused = _ref2[1];\n\n  var valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(function () {\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      return setIsFocused(true);\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      return setIsFocused(false);\n    });\n    return function () {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  React.useDebugValue(valueToReturn);\n  return valueToReturn;\n}","map":{"version":3,"sources":["useIsFocused.tsx"],"names":["navigation","valueToReturn","isFocused","setIsFocused","React","unsubscribeFocus","unsubscribeBlur"],"mappings":";;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,mBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMe,SAAA,YAAA,GAAiC;AAC9C,MAAMA,UAAU,GAAG,CAAA,GAAA,cAAnB,WAAmB,GAAnB;;AAD8C,aAEZ,CAAA,GAAA,KAAA,CAAA,QAAA,EAASA,UAAU,CAArD,SAAkC,CAFY;AAAA;AAAA,MAExC,SAFwC;AAAA,MAExC,YAFwC;;AAI9C,MAAMC,aAAa,GAAGD,UAAU,CAAhC,SAAsBA,EAAtB;;AAEA,MAAIE,SAAS,KAAb,aAAA,EAAiC;AAM/BC,IAAAA,YAAY,CAAZA,aAAY,CAAZA;AACD;;AAEDC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMC,gBAAgB,GAAGL,UAAU,CAAVA,WAAAA,CAAAA,OAAAA,EAAgC;AAAA,aACvDG,YAAY,CADd,IACc,CAD2C;AAAA,KAAhCH,CAAzB;AAIA,QAAMM,eAAe,GAAGN,UAAU,CAAVA,WAAAA,CAAAA,MAAAA,EAA+B;AAAA,aACrDG,YAAY,CADd,KACc,CADyC;AAAA,KAA/BH,CAAxB;AAIA,WAAO,YAAM;AACXK,MAAAA,gBAAgB;AAChBC,MAAAA,eAAe;AAFjB,KAAA;AATFF,GAAAA,EAaG,CAbHA,UAaG,CAbHA;AAeAA,EAAAA,KAAK,CAALA,aAAAA,CAAAA,aAAAA;AAEA,SAAA,aAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n"]},"metadata":{},"sourceType":"script"}