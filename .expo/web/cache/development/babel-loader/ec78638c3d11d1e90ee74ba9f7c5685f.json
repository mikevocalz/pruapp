{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.enableScreens = enableScreens;\nexports.screensEnabled = screensEnabled;\nexports.NativeScreenContainer = exports.ScreenContainer = exports.Screen = exports.NativeScreen = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar ENABLE_SCREENS = true;\n\nfunction enableScreens() {\n  var shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nfunction screensEnabled() {\n  return ENABLE_SCREENS;\n}\n\nvar NativeScreen = function (_react$default$Compon) {\n  _inherits(NativeScreen, _react$default$Compon);\n\n  var _super = _createSuper(NativeScreen);\n\n  function NativeScreen() {\n    _classCallCheck(this, NativeScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NativeScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          style = _this$props.style,\n          rest = _objectWithoutProperties(_this$props, [\"active\", \"style\"]);\n\n      return _react[\"default\"].createElement(_reactNative.View, _extends({\n        style: [style, ENABLE_SCREENS && !active ? {\n          display: 'none'\n        } : null]\n      }, rest));\n    }\n  }]);\n\n  return NativeScreen;\n}(_react[\"default\"].Component);\n\nexports.NativeScreen = NativeScreen;\n\nvar Screen = _reactNative.Animated.createAnimatedComponent(NativeScreen);\n\nexports.Screen = Screen;\nvar ScreenContainer = _reactNative.View;\nexports.ScreenContainer = ScreenContainer;\nvar NativeScreenContainer = _reactNative.View;\nexports.NativeScreenContainer = NativeScreenContainer;","map":{"version":3,"sources":["index.js"],"names":["ENABLE_SCREENS","shouldEnableScreens","React","style","display","Screen","Animated","ScreenContainer","View","NativeScreenContainer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAIA,cAAc,GAAlB,IAAA;;AAEO,SAAA,aAAA,GAAmD;AAAA,MAA5BC,mBAA4B,uEAAnD,IAAmD;AACxDD,EAAAA,cAAc,GAAdA,mBAAAA;AACD;;AAEM,SAAA,cAAA,GAA0B;AAC/B,SAAA,cAAA;AACD;;IAEM,Y;;;;;;;;;;;;;6BACI;AACP,UAAA,WAAA,GAAmC,KAAnC,KAAA;AAAA,UAAM,MAAN,GAAA,WAAA,CAAM,MAAN;AAAA,UAAgBG,KAAhB,GAAA,WAAA,CAAgBA,KAAhB;AAAA,UAAA,IAAA,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,QAAA,EAAA,OAAA,CAAA,CAAA;;AAEA,aACE,MAAA,WAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA,QAAA,CAAA;AACE,QAAA,KAAK,EAAE,CAAA,KAAA,EAAQ,cAAc,IAAI,CAAlB,MAAA,GAA4B;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAA5B,GAAR,IAAA;AADT,OAAA,EADF,IACE,CAAA,CADF;AAMD;;;;EAV+BF,MAAAA,WAAAA,CAA3B,S;;;;AAaA,IAAMG,MAAM,GAAGC,YAAAA,CAAAA,QAAAA,CAAAA,uBAAAA,CAAf,YAAeA,CAAf;;;AAEA,IAAMC,eAAe,GAAGC,YAAAA,CAAxB,IAAA;;AAEA,IAAMC,qBAAqB,GAAGD,YAAAA,CAA9B,IAAA","sourcesContent":["import React from 'react';\nimport { Animated, View } from 'react-native';\n\nlet ENABLE_SCREENS = true;\n\nexport function enableScreens(shouldEnableScreens = true) {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nexport function screensEnabled() {\n  return ENABLE_SCREENS;\n}\n\nexport class NativeScreen extends React.Component {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[style, ENABLE_SCREENS && !active ? { display: 'none' } : null]}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const ScreenContainer = View;\n\nexport const NativeScreenContainer = View;\n"]},"metadata":{},"sourceType":"script"}