{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Screen, screensEnabled } from 'react-native-screens';\nvar FAR_FAR_AWAY = 30000;\n\nvar ResourceSavingScene = function (_React$Component) {\n  _inherits(ResourceSavingScene, _React$Component);\n\n  var _super = _createSuper(ResourceSavingScene);\n\n  function ResourceSavingScene() {\n    _classCallCheck(this, ResourceSavingScene);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ResourceSavingScene, [{\n    key: \"render\",\n    value: function render() {\n      if ((screensEnabled === null || screensEnabled === void 0 ? void 0 : screensEnabled()) && Platform.OS !== 'web') {\n        var _this$props = this.props,\n            _isVisible = _this$props.isVisible,\n            _rest = _objectWithoutProperties(_this$props, [\"isVisible\"]);\n\n        if (shouldUseActivityState) {\n          return React.createElement(Screen, _extends({\n            activityState: _isVisible ? 2 : 0\n          }, _rest));\n        } else {\n          return React.createElement(Screen, _extends({\n            active: _isVisible ? 1 : 0\n          }, _rest));\n        }\n      }\n\n      var _this$props2 = this.props,\n          isVisible = _this$props2.isVisible,\n          children = _this$props2.children,\n          style = _this$props2.style,\n          rest = _objectWithoutProperties(_this$props2, [\"isVisible\", \"children\", \"style\"]);\n\n      return React.createElement(View, _extends({\n        style: [styles.container, Platform.OS === 'web' ? {\n          display: isVisible ? 'flex' : 'none'\n        } : null, style],\n        collapsable: false,\n        removeClippedSubviews: Platform.OS === 'ios' ? !isVisible : true,\n        pointerEvents: isVisible ? 'auto' : 'none'\n      }, rest), React.createElement(View, {\n        style: isVisible ? styles.attached : styles.detached\n      }, children));\n    }\n  }]);\n\n  return ResourceSavingScene;\n}(React.Component);\n\nexport { ResourceSavingScene as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["shouldUseActivityState","rest","styles","container","display","style","Platform","isVisible","attached","detached","flex"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAEA,SAAA,MAAA,EAAA,cAAA,QAGE,sBAHF;AAAA,IAIEA,YAAAA,GAJF,KAAA;;;;;;;;;;;;;;;6BAgBA;AAEI,UAAA,CAAA,cAAA,KAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,cAAA,EAAA,KAAA,QAAA,CAAA,EAAA,KAAA,KAAA,EAAA;AAAA,0BAEqB,KAAGC,KAFxB;AAAA,YAEE,UAFF,eAEE,SAFF;AAAA,YAEQ,KAFR;;;AAIE,iBAEI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACA,YAAA,aAAA,EAAA,UAAA,GAAA,CAAA,GAAA;AADA,WAAA,EACQ,KADR,CAAA,CAFJ;AACE,S,MAAA;AADF,iBAOI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACA,YAAA,MAAA,EAAA,UAAA,GAAC,CAAD,GAAA;AADA,WAAA,EACQ,KADR,CAAA,CAPJ;AAME;AAID;;AAhBP,yBAmBwC,KAAGA,KAnB3C;AAAA,UAmBI,SAnBJ,gBAmBI,SAnBJ;AAAA,UAmBU,QAnBV,gBAmBU,QAnBV;AAAA,UAmBU,KAnBV,gBAmBU,KAnBV;AAAA,UAmBU,IAnBV;;AAmBI,aAAA,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAEA,QAAA,KAAA,EAAA,CAAA,MAAA,CAAA,SAAA,EACE,QAAA,CAAA,EAAA,KAAA,KAAA,GAAA;AACE,UAAA,OACEC,EAAAA,SAAOC,GADF,MACEA,GACP;AAHJ,SAAA,GAIUC,IALZ,EAKmB,KALnB,CAFA;AAIW,QAAA,WAKLC,EANJ,KAHF;AAGE,QAAA,qBAAA,EAWI,QAAA,CAAA,EAAA,KAAA,KAAA,GAAA,CAAA,SAAA,GAAA,IAdN;AAeMC,QAAAA,aAAAA,EAAAA,SAAwB,GAAxBA,MAAwB,GAZ5B;AAHF,OAAA,EAiBI,IAjBJ,CAAA,EAiBmBC,KAAS,CAAA,aAATA,CAAqB,IAArBA,EAAqB;AAdtC,QAAA,KAAA,EAAA,SAAA,GAAA,MAiBE,CAAA,QAjBF,GAiBE,MAAC,CAAD;AAHoC,OAArBA,EAGT,QAHSA,CAjBnB,CAAA;AAEA;;;;;;;AArBoE,IAAA,MAAA,GAAA,UAAA,CAAA,MAAA,CAAA;AA+CxE,EAAA,SAAML,EAAM;AACVC,IAAAA,IAAAA,EAAAA,CADU;AACC,IAAA,QAAA,EAAA;AADD,GA/C4D;AA+CvC,EAAA,QAAA,EAAA;AAK/BK,IAAAA,IAAAA,EAAQ;AALuB,GA/CuC;AA+CvC,EAAA,QAAA,EAAA;AAQ/BC,IAAAA,IAAAA,EAAQ,CARuB;AAS7BC,IAAAA,GAAAA,EADQ;AARqB;AA/CuC,CAAA,CAAA","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    // react-native-screens is buggy on web\n    if (screensEnabled?.() && Platform.OS !== 'web') {\n      const { isVisible, ...rest } = this.props;\n\n      if (shouldUseActivityState) {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen activityState={isVisible ? 2 : 0} {...rest} />\n        );\n      } else {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen active={isVisible ? 1 : 0} {...rest} />\n        );\n      }\n    }\n\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[\n          styles.container,\n          Platform.OS === 'web'\n            ? { display: isVisible ? 'flex' : 'none' }\n            : null,\n          style,\n        ]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}