{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = useScheduleUpdate;\nexports.ScheduleUpdateContext = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\nvar ScheduleUpdateContext = React.createContext({\n  scheduleUpdate: function scheduleUpdate() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  flushUpdates: function flushUpdates() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  }\n});\nexports.ScheduleUpdateContext = ScheduleUpdateContext;\n\nfunction useScheduleUpdate(callback) {\n  var _React$useContext = React.useContext(ScheduleUpdateContext),\n      scheduleUpdate = _React$useContext.scheduleUpdate,\n      flushUpdates = _React$useContext.flushUpdates;\n\n  scheduleUpdate(callback);\n  React.useEffect(flushUpdates);\n}","map":{"version":3,"sources":["useScheduleUpdate.tsx"],"names":["MISSING_CONTEXT_ERROR","ScheduleUpdateContext","scheduleUpdate","flushUpdates","React"],"mappings":";;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,qBAAqB,GAA3B,mCAAA;AAEO,IAAMC,qBAAqB,GAAG,KAAK,CAAL,aAAA,CAGlC;AACDC,EAAAA,cADC,4BACgB;AACf,UAAM,IAAA,KAAA,CAAN,qBAAM,CAAN;AAFD,GAAA;AAIDC,EAAAA,YAJC,0BAIc;AACb,UAAM,IAAA,KAAA,CAAN,qBAAM,CAAN;AACD;AANA,CAHkC,CAA9B;;;AAmBQ,SAAA,iBAAA,CAAA,QAAA,EAAiD;AAAA,0BACrBC,KAAK,CAALA,UAAAA,CAAzC,qBAAyCA,CADqB;AAAA,MACxD,cADwD,qBACxD,cADwD;AAAA,MACtCD,YADsC,qBACtCA,YADsC;;AAK9DD,EAAAA,cAAc,CAAdA,QAAc,CAAdA;AAEAE,EAAAA,KAAK,CAALA,SAAAA,CAAAA,YAAAA;AACD","sourcesContent":["import * as React from 'react';\n\nconst MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\n\nexport const ScheduleUpdateContext = React.createContext<{\n  scheduleUpdate: (callback: () => void) => void;\n  flushUpdates: () => void;\n}>({\n  scheduleUpdate() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  flushUpdates() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n});\n\n/**\n * When screen config changes, we want to update the navigator in the same update phase.\n * However, navigation state is in the root component and React won't let us update it from a child.\n * This is a workaround for that, the scheduled update is stored in the ref without actually calling setState.\n * It lets all subsequent updates access the latest state so it stays correct.\n * Then we call setState during after the component updates.\n */\nexport default function useScheduleUpdate(callback: () => void) {\n  const { scheduleUpdate, flushUpdates } = React.useContext(\n    ScheduleUpdateContext\n  );\n\n  scheduleUpdate(callback);\n\n  React.useEffect(flushUpdates);\n}\n"]},"metadata":{},"sourceType":"script"}