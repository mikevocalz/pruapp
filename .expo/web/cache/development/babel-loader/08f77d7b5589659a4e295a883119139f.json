{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = useOnGetState;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\n\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\n\nvar _isArrayEqual = _interopRequireDefault(require(\"./isArrayEqual\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction useOnGetState(_ref) {\n  var getState = _ref.getState,\n      getStateListeners = _ref.getStateListeners;\n\n  var _React$useContext = React.useContext(_NavigationBuilderContext[\"default\"]),\n      addKeyedListener = _React$useContext.addKeyedListener;\n\n  var route = React.useContext(_NavigationRouteContext[\"default\"]);\n  var key = route ? route.key : 'root';\n  var getRehydratedState = React.useCallback(function () {\n    var state = getState();\n    var routes = state.routes.map(function (route) {\n      var _getStateListeners$ro;\n\n      var childState = (_getStateListeners$ro = getStateListeners[route.key]) === null || _getStateListeners$ro === void 0 ? void 0 : _getStateListeners$ro.call(getStateListeners);\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return _objectSpread(_objectSpread({}, route), {}, {\n        state: childState\n      });\n    });\n\n    if ((0, _isArrayEqual[\"default\"])(state.routes, routes)) {\n      return state;\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      routes: routes\n    });\n  }, [getState, getStateListeners]);\n  React.useEffect(function () {\n    return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}","map":{"version":3,"sources":["useOnGetState.tsx"],"names":["getStateListeners","addKeyedListener","React","NavigationBuilderContext","route","NavigationRouteContext","key","getRehydratedState","state","getState","routes","childState"],"mappings":";;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,yBAAA,GAAA,sBAAA,CAAA,OAAA,8BAAA,CAAA;;AAGA,IAAA,uBAAA,GAAA,sBAAA,CAAA,OAAA,4BAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,kBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOe,SAAA,aAAA,OAGH;AAAA,MAH0B,QAG1B,QAH0B,QAG1B;AAAA,MADVA,iBACU,QADVA,iBACU;;AAAA,0BACmBE,KAAK,CAALA,UAAAA,CAAiBC,yBAA9C,WAA6BD,CADnB;AAAA,MACFD,gBADE,qBACFA,gBADE;;AAEV,MAAMG,KAAK,GAAGF,KAAK,CAALA,UAAAA,CAAiBG,uBAA/B,WAAcH,CAAd;AACA,MAAMI,GAAG,GAAGF,KAAK,GAAGA,KAAK,CAAR,GAAA,GAAjB,MAAA;AAEA,MAAMG,kBAAkB,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AACjD,QAAMC,KAAK,GAAGC,QADmC,EACjD;AAGA,QAAMC,MAAM,GAAG,KAAK,CAAL,MAAA,CAAA,GAAA,CAAkBN,UAAAA,KAAD,EAAW;AAAA,UAAA,qBAAA;;AACzC,UAAMO,UAAU,GAAA,CAAA,qBAAA,GAAGX,iBAAiB,CAACI,KAAK,CAA1B,GAAoB,CAApB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGJ,qBAAAA,CAAAA,IAAAA,CAAnB,iBAAmBA,CAAnB;;AAEA,UAAII,KAAK,CAALA,KAAAA,KAAJ,UAAA,EAAgC;AAC9B,eAAA,KAAA;AACD;;AAED,6CAAO,KAAP;AAAmBI,QAAAA,KAAK,EAAEG;AAA1B;AAPF,KAAe,CAAf;;AAUA,QAAI,CAAA,GAAA,aAAA,WAAA,EAAaH,KAAK,CAAlB,MAAA,EAAJ,MAAI,CAAJ,EAAwC;AACtC,aAAA,KAAA;AACD;;AAED,2CAAO,KAAP;AAAmBE,MAAAA,MAAAA,EAAAA;AAAnB;AAlByB,GAAA,EAmBxB,CAAA,QAAA,EAnBH,iBAmBG,CAnBwB,CAA3B;AAqBAR,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,WAAOD,gBAAP,KAAA,IAAOA,IAAAA,gBAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,gBAAgB,CAAA,UAAA,EAAA,GAAA,EAAvB,kBAAuB,CAAvB;AADFC,GAAAA,EAEG,CAAA,gBAAA,EAAA,kBAAA,EAFHA,GAEG,CAFHA;AAGD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport isArrayEqual from './isArrayEqual';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n"]},"metadata":{},"sourceType":"script"}