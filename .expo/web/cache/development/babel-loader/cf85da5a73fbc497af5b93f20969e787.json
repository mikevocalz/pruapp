{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = useWindowDimensions;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction useWindowDimensions() {\n  var _React$useState = React.useState(function () {\n    var _reactNative$Dimensio = _reactNative.Dimensions.get('window'),\n        _reactNative$Dimensio2 = _reactNative$Dimensio.height,\n        height = _reactNative$Dimensio2 === void 0 ? 0 : _reactNative$Dimensio2,\n        _reactNative$Dimensio3 = _reactNative$Dimensio.width,\n        width = _reactNative$Dimensio3 === void 0 ? 0 : _reactNative$Dimensio3;\n\n    return {\n      height: height,\n      width: width\n    };\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    var onChange = function onChange(_ref) {\n      var window = _ref.window;\n      var width = window.width,\n          height = window.height;\n      setDimensions(function (d) {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return {\n          width: width,\n          height: height\n        };\n      });\n    };\n\n    onChange({\n      window: _reactNative.Dimensions.get('window')\n    });\n\n    _reactNative.Dimensions.addEventListener('change', onChange);\n\n    return function () {\n      return _reactNative.Dimensions.removeEventListener('change', onChange);\n    };\n  }, []);\n  return dimensions;\n}","map":{"version":3,"sources":["useWindowDimensions.tsx"],"names":["height","width","Dimensions","React","onChange","window","setDimensions","d"],"mappings":";;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKe,SAAA,mBAAA,GAA+B;AAAA,wBACR,KAAK,CAAL,QAAA,CAAe,YAAM;AAAA,gCAErBE,YAAAA,CAAAA,UAAAA,CAAAA,GAAAA,CAAlC,QAAkCA,CAFqB;AAAA,uDAE/CF,MAF+C;AAAA,QAE/CA,MAF+C,uCAEjD,CAFiD;AAAA,uDAEnCC,KAFmC;AAAA,QAEnCA,KAFmC,uCAE3B,CAF2B;;AAIvD,WAAO;AAAED,MAAAA,MAAF,EAAEA,MAAF;AAAUC,MAAAA,KAAAA,EAAAA;AAAV,KAAP;AAJF,GAAoC,CADQ;AAAA;AAAA,MACtC,UADsC;AAAA,MACtC,aADsC;;AAQ5CE,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAwC;AAAA,UAArCC,MAAqC,QAArCA,MAAqC;AAAA,UACjD,KADiD,GACvD,MADuD,CACjD,KADiD;AAAA,UACxCL,MADwC,GACvD,MADuD,CACxCA,MADwC;AAGvDM,MAAAA,aAAa,CAAEC,UAAAA,CAAD,EAAO;AACnB,YAAIN,KAAK,KAAKM,CAAC,CAAXN,KAAAA,IAAqBD,MAAM,KAAKO,CAAC,CAArC,MAAA,EAA8C;AAC5C,iBAAA,CAAA;AACD;;AAED,eAAO;AAAEN,UAAAA,KAAF,EAAEA,KAAF;AAASD,UAAAA,MAAAA,EAAAA;AAAT,SAAP;AALFM,OAAa,CAAbA;AAJkB,KACpB;;AAcAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,MAAM,EAAEH,YAAAA,CAAAA,UAAAA,CAAAA,GAAAA,CAAAA,QAAAA;AAAV,KAAD,CAARE;;AAEAF,IAAAA,YAAAA,CAAAA,UAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAAA,QAAAA;;AAEA,WAAO;AAAA,aAAMA,YAAAA,CAAAA,UAAAA,CAAAA,mBAAAA,CAAAA,QAAAA,EAAb,QAAaA,CAAN;AAAA,KAAP;AAnBFC,GAAAA,EAAAA,EAAAA;AAsBA,SAAA,UAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { ScaledSize, Dimensions } from 'react-native';\n\n// This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return { width, height };\n      });\n    };\n\n    // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n    onChange({ window: Dimensions.get('window') });\n\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"script"}