{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\nexport default function useCachedResources() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _loadResourcesAndDataAsync.apply(this, arguments);\n    }\n\n    function _loadResourcesAndDataAsync() {\n      _loadResourcesAndDataAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                SplashScreen.preventAutoHideAsync();\n                _context.next = 4;\n                return Font.loadAsync(_objectSpread(_objectSpread({}, Ionicons.font), {}, {\n                  'space-mono': require(\"../assets/fonts/SpaceMono-Regular.ttf\")\n                }));\n\n              case 4:\n                _context.next = 9;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n                console.warn(_context.t0);\n\n              case 9:\n                _context.prev = 9;\n                setLoadingComplete(true);\n                SplashScreen.hideAsync();\n                return _context.finish(9);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 6, 9, 13]]);\n      }));\n      return _loadResourcesAndDataAsync.apply(this, arguments);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n  return isLoadingComplete;\n}","map":{"version":3,"sources":["/Users/mikevocalz/pruapp/hooks/useCachedResources.ts"],"names":["Ionicons","Font","SplashScreen","React","useCachedResources","useState","isLoadingComplete","setLoadingComplete","useEffect","loadResourcesAndDataAsync","preventAutoHideAsync","loadAsync","font","require","console","warn","hideAsync"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,oBAAzB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,eAAe,SAASC,kBAAT,GAA8B;AAAA,wBACKD,KAAK,CAACE,QAAN,CAAe,KAAf,CADL;AAAA;AAAA,MACpCC,iBADoC;AAAA,MACjBC,kBADiB;;AAI3CJ,EAAAA,KAAK,CAACK,SAAN,CAAgB,YAAM;AAAA,aACLC,yBADK;AAAA;AAAA;;AAAA;AAAA,8EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIP,gBAAAA,YAAY,CAACQ,oBAAb;AAFJ;AAAA,uBAKUT,IAAI,CAACU,SAAL,iCACDX,QAAQ,CAACY,IADR;AAEJ,gCAAcC,OAAO;AAFjB,mBALV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWIC,gBAAAA,OAAO,CAACC,IAAR;;AAXJ;AAAA;AAaIR,gBAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAL,gBAAAA,YAAY,CAACc,SAAb;AAdJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADoB;AAAA;AAAA;;AAmBpBP,IAAAA,yBAAyB;AAC1B,GApBD,EAoBG,EApBH;AAsBA,SAAOH,iBAAP;AACD","sourcesContent":["import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n"]},"metadata":{},"sourceType":"module"}