{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar FAR_FAR_AWAY = 30000;\n\nvar ResourceSavingScene = function (_React$Component) {\n  _inherits(ResourceSavingScene, _React$Component);\n\n  var _super = _createSuper(ResourceSavingScene);\n\n  function ResourceSavingScene() {\n    _classCallCheck(this, ResourceSavingScene);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ResourceSavingScene, [{\n    key: \"render\",\n    value: function render() {\n      if ((_reactNativeScreens.screensEnabled === null || _reactNativeScreens.screensEnabled === void 0 ? void 0 : (0, _reactNativeScreens.screensEnabled)()) && _reactNative.Platform.OS !== 'web') {\n        var _this$props = this.props,\n            _isVisible = _this$props.isVisible,\n            _rest = _objectWithoutProperties(_this$props, [\"isVisible\"]);\n\n        if (_reactNativeScreens.shouldUseActivityState) {\n          return React.createElement(_reactNativeScreens.Screen, _extends({\n            activityState: _isVisible ? 2 : 0\n          }, _rest));\n        } else {\n          return React.createElement(_reactNativeScreens.Screen, _extends({\n            active: _isVisible ? 1 : 0\n          }, _rest));\n        }\n      }\n\n      var _this$props2 = this.props,\n          isVisible = _this$props2.isVisible,\n          children = _this$props2.children,\n          style = _this$props2.style,\n          rest = _objectWithoutProperties(_this$props2, [\"isVisible\", \"children\", \"style\"]);\n\n      return React.createElement(_reactNative.View, _extends({\n        style: [styles.container, _reactNative.Platform.OS === 'web' ? {\n          display: isVisible ? 'flex' : 'none'\n        } : null, style],\n        collapsable: false,\n        removeClippedSubviews: _reactNative.Platform.OS === 'ios' ? !isVisible : true,\n        pointerEvents: isVisible ? 'auto' : 'none'\n      }, rest), React.createElement(_reactNative.View, {\n        style: isVisible ? styles.attached : styles.detached\n      }, children));\n    }\n  }]);\n\n  return ResourceSavingScene;\n}(React.Component);\n\nexports[\"default\"] = ResourceSavingScene;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["FAR_FAR_AWAY","React","Platform","rest","shouldUseActivityState","isVisible","styles","display","detached","container","flex","overflow","attached","top"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAEA,IAAA,mBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAMA,YAAY,GAAlB,KAAA;;IAEe,mB;;;;;;;;;;;;;6BACJ;AAEP,UAAI,CAAA,mBAAA,CAAA,cAAA,KAAA,IAAA,IAAA,mBAAA,CAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,GAAA,mBAAA,CAAA,cAAA,GAAA,KAAsBE,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAA1B,KAAA,EAAiD;AAAA,0BAChB,KAA/B,KAD+C;AAAA,YACzC,UADyC,eACzC,SADyC;AAAA,YACzBC,KADyB;;AAG/C,YAAIC,mBAAAA,CAAJ,sBAAA,EAA4B;AAC1B,iBAEE,KAAA,CAAA,aAAA,CAAC,mBAAA,CAAD,MAAA,EAAA,QAAA,CAAA;AAAQ,YAAA,aAAa,EAAEC,UAAS,GAAA,CAAA,GAAO;AAAvC,WAAA,EAAA,KAAA,CAAA,CAFF;AADF,SAAA,MAKO;AACL,iBAEE,KAAA,CAAA,aAAA,CAAC,mBAAA,CAAD,MAAA,EAAA,QAAA,CAAA;AAAQ,YAAA,MAAM,EAAEA,UAAS,GAAA,CAAA,GAAO;AAAhC,WAAA,EAAA,KAAA,CAAA,CAFF;AAID;AACF;;AAhBM,yBAkByC,KAAhD,KAlBO;AAAA,UAkBD,SAlBC,gBAkBD,SAlBC;AAAA,UAkBD,QAlBC,gBAkBD,QAlBC;AAAA,UAkBD,KAlBC,gBAkBD,KAlBC;AAAA,UAkBgCF,IAlBhC;;AAoBP,aACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA,QAAA,CAAA;AACE,QAAA,KAAK,EAAE,CACLG,MAAM,CADD,SAAA,EAEL,YAAA,CAAA,QAAA,CAAA,EAAA,KAAA,KAAA,GACI;AAAEC,UAAAA,OAAO,EAAEF,SAAS,GAAA,MAAA,GAAY;AAAhC,SADJ,GAFK,IAAA,EADT,KACS,CADT;AAQE,QAAA,WAAW,EARb,KAAA;AASE,QAAA,qBAAqB,EAGnBH,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAAA,KAAAA,GAAwB,CAAxBA,SAAAA,GAZJ,IAAA;AAcE,QAAA,aAAa,EAAEG,SAAS,GAAA,MAAA,GAAY;AAdtC,OAAA,EAAA,IAAA,CAAA,EAiBE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAM,QAAA,KAAK,EAAEA,SAAS,GAAGC,MAAM,CAAT,QAAA,GAAqBA,MAAM,CAACE;AAAlD,OAAA,EAlBJ,QAkBI,CAjBF,CADF;AAuBD;;;;EA5C8CP,KAAK,CAAvC,S;;;;AA+Cf,IAAMK,MAAM,GAAG,YAAA,CAAA,UAAA,CAAA,MAAA,CAAkB;AAC/BG,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EADK,CAAA;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,IAAI,EAAE;AADE,GALqB;AAQ/BF,EAAAA,QAAQ,EAAE;AACRE,IAAAA,IAAI,EADI,CAAA;AAERG,IAAAA,GAAG,EAAEb;AAFG;AARqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    // react-native-screens is buggy on web\n    if (screensEnabled?.() && Platform.OS !== 'web') {\n      const { isVisible, ...rest } = this.props;\n\n      if (shouldUseActivityState) {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen activityState={isVisible ? 2 : 0} {...rest} />\n        );\n      } else {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen active={isVisible ? 1 : 0} {...rest} />\n        );\n      }\n    }\n\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[\n          styles.container,\n          Platform.OS === 'web'\n            ? { display: isVisible ? 'flex' : 'none' }\n            : null,\n          style,\n        ]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}